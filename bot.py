from telegram import Update
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, ContextTypes, MessageHandler, filters, CommandHandler

from gpt import *
from util import *
from credentials import *
import openai
import  asyncio

password = None
count = 0

def my_decorator(func):
    async def wrapper(update, context):
        try:
            await func(update, context)
        except openai.AuthenticationError:
            await  send_text(update, context, "–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞")
        except openai.APIConnectionError:
            await  send_text(update, context, "–ù–µ—Ç GPT —Ç–æ–∫–µ–Ω–∞")
    return wrapper


def my_decorator1(func):
    async def wrapper1(update, context):
        global password
        global count
        if password=="password":
            await func(update, context)
        else:
            password = update.message.text
            await asyncio.wait_for(send_text(update, context, "üîê"), timeout=1)
            if password=="password":
                await send_text(update, context, "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")
            elif count==0:
                await send_text(update, context, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
                count += 1
            else:
                await send_text(update, context, "–ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
                await send_text(update, context, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
                count+=1
    return wrapper1


@my_decorator1
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "main"
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'translation': '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ üåç'
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
        # 'command': 'button text'
    })


@my_decorator1
@my_decorator
async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "random"
    text = load_message('random')
    await send_image(update, context, 'random')
    await send_text(update, context, text)
    text1 = load_prompt("random")
    answer = await  chat_gpt.add_message(text1)
    await  send_text(update, context, answer)
    await send_text_buttons(update, context, "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–∫—Ç?", {
        "random_start": "–ó–∞–∫–æ–Ω—á–∏—Ç—å",
        "random_random": "–•–æ—á—É –µ—â—ë —Ñ–∞–∫—Ç"})


async def random_button(update, context):
    query = update.callback_query.data
    if query == "random_start":
        await start(update, context)
    else:
        await random(update, context)


@my_decorator1
async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "gpt"
    text = load_message('gpt')
    prompt = load_prompt("gpt")
    await send_image(update, context, 'gpt')
    await send_text(update, context, text)
    chat_gpt.set_prompt(prompt)


@my_decorator
async def gpt_dialog(update, context):
    dialog.mode = "gpt"
    text = update.message.text
    answer = await  chat_gpt.add_message(text)
    await  send_text(update, context, answer)


@my_decorator1
async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "quiz"
    text1 = load_message("quiz")
    await send_image(update, context, "quiz")
    await send_text_buttons(update, context, text1, {
        "quiz_1": "–¢–µ–º–∞: –ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏",
        "quiz_2": "–¢–µ–º–∞: –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä",
        "quiz_3": "–¢–µ–º–∞: –§–∏–ª—å–º—ã"})


@my_decorator1
async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "talk"
    text = load_message("talk")
    await send_image(update, context, "talk")
    await send_text_buttons(update, context, text, {
        "talk_cobain": "–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω",
        "talk_hawking": "–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥",
        "talk_nietzsche": "–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ",
        "talk_queen": "–ö–æ—Ä–æ–ª–µ–≤–∞ –ï–ª–∏–∑–∞–≤–µ—Ç–∞ II",
        "talk_tony_stark": "–¢–æ–Ω–∏ –°—Ç–∞—Ä–∫"})


@my_decorator
async def talk_dialog(update, context):
    dialog.mode = "talk"
    text = update.message.text
    answer = await  chat_gpt.add_message(text)
    await  send_text(update, context, answer)


@my_decorator
async def talk_button(update, context):
    dialog.mode = "talk"
    query = update.callback_query.data
    await  update.callback_query.answer()
    await  send_image(update, context, query)
    await  send_text(update, context, "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.")
    prompt = load_prompt(query)
    chat_gpt.set_prompt(prompt)


async def quiz_button_button(update, context):
    dialog.mode = "quiz"
    text1 = load_message("quiz")
    await send_image(update, context, "quiz")
    await send_text_buttons(update, context, text1, {
        "quiz_11": "–¢–µ–º–∞: –ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏",
        "quiz_22": "–¢–µ–º–∞: –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä",
        "quiz_33": "–¢–µ–º–∞: –§–∏–ª—å–º—ã"})


@my_decorator
async def quiz_button(update, context):
    dialog.mode = "quiz"
    query = update.callback_query.data
    if query == "quiz_1" or query == "quiz_2" or query == "quiz_3":
        await  update.callback_query.answer()
        await  send_text(update, context, "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: ")
        prompt = load_prompt("quiz")
        chat_gpt.set_prompt(prompt)
        answer = await  chat_gpt.add_message(query)
        await  send_text(update, context, answer)
    elif query == "quiz_11" or query == "quiz_22" or query == "quiz_33":
        await  update.callback_query.answer()
        await  send_text(update, context, "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: ")
        answer = await  chat_gpt.add_message(query)
        await  send_text(update, context, answer)
    elif query == "quiz_more":
        await  update.callback_query.answer()
        await  send_text(update, context, "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: ")
        answer = await  chat_gpt.add_message(query)
        await  send_text(update, context, answer)
    elif query == "quiz_new":
        await quiz_button_button(update, context)
    elif query == "quiz_start":
        await start(update, context)


@my_decorator
async def quiz_dialog(update, context):
    dialog.mode = "quiz"
    text = update.message.text
    answer = await  chat_gpt.add_message(text)
    await  send_text(update, context, answer)
    await send_text_buttons(update, context, "–ü—Ä–æ–¥–æ–ª–∂–∏–º?", {
        "quiz_more": "–í–æ–ø—Ä–æ—Å –Ω–∞ —Ç—É –∂–µ —Ç–µ–º—É",
        "quiz_new": "–í—ã–±–æ—Ä –Ω–æ–≤–æ–π —Ç–µ–º—ã",
        "quiz_start": "–í—ã—Ö–æ–¥ –∏–∑ –ö–≤–∏–∑–∞"})


@my_decorator1
async def translation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "translation"
    text1 = load_message("translation")
    await send_image(update, context, "translation")
    await send_text_buttons(update, context, text1, {
        "translation_en": "–ü–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π",
        "translation_ru": "–ü–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"})


@my_decorator
async  def translation_button(update, context):
    pass


@my_decorator
async  def translation_dialog(update, context):
    pass


@my_decorator1
async def hello(update, context):
    if dialog.mode == "gpt":
        await gpt_dialog(update, context)
    elif dialog.mode == "random":
        await random(update, context)
    elif dialog.mode == "talk":
        await talk_dialog(update, context)
    elif dialog.mode == "quiz":
        await quiz_dialog(update, context)
    elif dialog.mode == "translation":
        await translation_dialog(update, context)
    else:
        await send_text(update, context, "–ü—Ä–∏–≤–µ—Ç")
        await send_image(update, context, "avatar_main")
        await send_text_buttons(update, context, "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", {
            "start": "–ó–∞–ø—É—Å—Ç–∏—Ç—å",
            "stop": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"})


async def hello_button(update, context):
    query = update.callback_query.data
    if query == "start":
        await start(update, context)
    else:
        await  send_text(update, context, "–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


dialog = Dialog()
dialog.mode = None

chat_gpt = ChatGptService(token=ChatGPT_TOKEN)
app = ApplicationBuilder().token(BOT_TOKEN).build()

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CommandHandler('command', handler_func))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("random", random))
app.add_handler(CommandHandler("talk", talk))
app.add_handler(CommandHandler("quiz", quiz))
app.add_handler(CommandHandler("translation", translation))
# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–∞ –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CallbackQueryHandler(app_button, pattern='^app_.*'))
app.add_handler(CallbackQueryHandler(random_button, pattern="^random.*"))
app.add_handler(CallbackQueryHandler(talk_button, pattern="^talk.*"))
app.add_handler(CallbackQueryHandler(quiz_button, pattern="^quiz.*"))
app.add_handler(CallbackQueryHandler(translation_button, pattern="^translation.*"))
app.add_handler(CallbackQueryHandler(hello_button))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
